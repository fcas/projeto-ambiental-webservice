{"repo_token":"x1WiwNAftxUWLrLC0EUB85ljHD42ucWWZ","environment":{},"git":{"head":{"id":"78b018876240adbad9fcbb97e5004064ecbd6412","message":"mvn install contexttoolkit-2.0.jar\n","author_name":"fcas","author_email":"f3l1nux@gmail.com","committer_name":"fcas","committer_email":"f3l1nux@gmail.com"},"branch":"master","remotes":[{"name":"heroku","url":"git@heroku.com:projeto-ambiental-webservice.git"},{"name":"github","url":"git@github.com:fcas/projeto-ambiental-webservice.git"}]},"source_files":[{"source":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage br.ufrn.WebService;\n\nimport br.ufrn.controlers.AtualizarWidgetsRMI;\nimport br.ufrn.controlers.Reference;\nimport java.rmi.RemoteException;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.core.MediaType;\n\n/**\n * REST Web Service\n *\n * @author Jorge\n */\n@Path(\"monitoramento_ambiental\")\npublic class WebServiceMonitoramentoAmbiental {\n\n//    private InstanciaWidget widget;\n//    private final AtualizarWidgets atualizarWidgets = ConcreteAtualizarWidgets.getInstance();\n//    \n//    private MonitorCidade monitorCidade = MonitorCidade.getInstance();\n    private AtualizarWidgetsRMI atualizarWidgets = new Reference().getReference(\"rmi://localhost:1029/Monitoramento\");\n\n    /**\n     * Creates a new instance of WebServiceMonitoramentoAmbiental\n     */\n    public WebServiceMonitoramentoAmbiental() {\n//        this.widget = new InstanciaWidget();\n//        monitorCidade.setVisible(true);\n    }\n\n    //=====PollutionWidget=====\n    @POST\n    @Path(\"/atualizar_indice_poluicao/{area}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void atualizarindicePoluicao(@PathParam(\"area\") int area, String indexPolluition) throws RemoteException {\n        atualizarWidgets.atualizarIndicePoluicao(area, Integer.parseInt(indexPolluition));\n        System.out.println(area + \" indice poluição \" + indexPolluition);\n    }\n\n    @POST\n    @Path(\"/atualizar_fluxo_veiculos/{area}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void atualizarFluxoDeVeiculos(@PathParam(\"area\") int area, String vehicleFlow) throws RemoteException {\n        atualizarWidgets.atualizarFluxoDeVeiculos(area, Integer.parseInt(vehicleFlow));\n        System.out.println(area + \" fluxo de veiculos  \" + vehicleFlow);\n    }\n\n    //este metodo deve atualizar o PollutionWidget e o TemperatureWidget\n    @POST\n    @Path(\"/atualizar_velocidade_vento/{area}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void atualizarVelociadeDoVento(@PathParam(\"area\") int area, String windSpeed) throws RemoteException {\n        atualizarWidgets.atualizarVelociadeDoVento(area, Integer.parseInt(windSpeed));\n        System.out.println(area + \"  velocidade do vento \" + windSpeed);\n    }\n\n    @POST\n    @Path(\"/atualizar_direcao_vento/{area}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void atualizardirecaoDoVento(@PathParam(\"area\") int area, String directionWind) throws RemoteException {\n        atualizarWidgets.atualizardirecaoDoVento(area, directionWind);\n        System.out.println(area + \"  direção do vento \" + directionWind);\n    }\n\n    @POST\n    @Path(\"/atualizar_probabilidade_chuva/{area}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void atualizarProbalidadeChuva(@PathParam(\"area\") int area, String willRain) throws RemoteException {\n        atualizarWidgets.atualizarProbalidadeChuva(area, Integer.parseInt(willRain));\n        System.out.println(area + \" vai chover \" + willRain);\n    }\n\n    @POST\n    @Path(\"/atualizar_quantidade_ruido/{area}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void atualizarQuantidadeRuido(@PathParam(\"area\") int area, String noise) throws RemoteException {\n        atualizarWidgets.atualizarQuantidadeRuido(area, Integer.parseInt(noise));\n        System.out.println(area + \" quantidade de ruido  \" + noise);\n    }\n\n    //======TemperatureWidget=====\n    @POST\n    @Path(\"/atualizar_temperatura/{area}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void atualizarTemeperatura(@PathParam(\"area\") int area, String temperature) throws RemoteException {\n        atualizarWidgets.atualizarTemeperatura(area, Integer.parseInt(temperature));\n        System.out.println(area + \" temperatura \" + temperature);\n    }\n\n    @POST\n    @Path(\"/atualizar_humidade/{area}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void atualizarHumidade(@PathParam(\"area\") int area, String humidity) throws RemoteException {\n        atualizarWidgets.atualizarHumidade(area, Integer.parseInt(humidity));\n        System.out.println(area + \" humidade do ar \" + humidity);\n    }\n\n    @POST\n    @Path(\"/atualizar_incidencia_incendio/{area}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void atualizarIncidenciaDeIncendio(@PathParam(\"area\") int area, String isFire) throws RemoteException {\n        atualizarWidgets.atualizarIncidenciaDeIncendio(area, Integer.parseInt(isFire));\n        System.out.println(area + \" fogo \" + isFire);\n    }\n\n    //=====DumpWidget===\n    @POST\n    @Path(\"/atualizar_quantidade_lixo/{area}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void atualizarQuantidadeLixo(@PathParam(\"area\") int area, String trash) throws RemoteException {\n        atualizarWidgets.atualizarQuantidadeLixo(area, Integer.parseInt(trash));\n        System.out.println(area + \" lixo \" + trash);\n    }\n\n    @POST\n    @Path(\"/atualizar_agente_proximo/{area}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void atualizarAgenteProximo(@PathParam(\"area\") int area, String agentNearName) throws RemoteException {\n        atualizarWidgets.atualizarAgenteProximo(area, agentNearName);\n        System.out.println(area + \"  agente proximo \" + agentNearName);\n    }\n\n    @POST\n    @Path(\"/atualizar_distancia_agente/{area}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void atualizaDistanciaAgente(@PathParam(\"area\") int area, String agentDistance) throws RemoteException {\n        atualizarWidgets.atualizaDistanciaAgente(area, Integer.parseInt(agentDistance));\n        System.out.println(area + \"  distancia proximo \" + agentDistance);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,null,0,null,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null],"name":"br/ufrn/WebService/WebServiceMonitoramentoAmbiental.java"},{"source":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage br.ufrn.controlers;\n\nimport java.rmi.Remote;\nimport java.rmi.RemoteException;\nimport javax.ws.rs.PathParam;\n\n/**\n *\n * @author Jorge\n */\npublic interface AtualizarWidgetsRMI extends Remote {\n\n    //=====PollutionWidget=====\n    public void atualizarIndicePoluicao(Integer area, Integer indexPolluition) throws RemoteException;\n\n    public void atualizarFluxoDeVeiculos(Integer area, Integer vehicleFlow) throws RemoteException;\n\n    //este metodo deve atualizar o PollutionWidget e o TemperatureWidget\n    public void atualizarVelociadeDoVento(Integer area, Integer windSpeed) throws RemoteException;\n\n    public void atualizardirecaoDoVento(Integer area, String directionWind) throws RemoteException;\n\n    public void atualizarProbalidadeChuva(Integer area, Integer willRain) throws RemoteException;\n\n    public void atualizarQuantidadeRuido(Integer area, Integer noise) throws RemoteException;\n\n    //======TemperatureWidget=====\n    public void atualizarTemeperatura(Integer area, Integer temperature) throws RemoteException;\n\n    public void atualizarHumidade(Integer area, Integer humidity) throws RemoteException;\n\n    public void atualizarIncidenciaDeIncendio(Integer area, Integer isFire) throws RemoteException;\n\n    //=====DumpWidget===\n    public void atualizarQuantidadeLixo(Integer area, Integer trash) throws RemoteException;\n\n    public void atualizarAgenteProximo(Integer area, String agentNearName) throws RemoteException;\n\n    public void atualizaDistanciaAgente(Integer area, Integer agentDistance) throws RemoteException;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"br/ufrn/controlers/AtualizarWidgetsRMI.java"},{"source":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage br.ufrn.controlers;\n\nimport java.net.MalformedURLException;\nimport java.rmi.Naming;\nimport java.rmi.NotBoundException;\nimport java.rmi.RemoteException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n *\n * @author Jorge\n */\npublic class Reference {\n\n    public AtualizarWidgetsRMI getReference(String url) {\n\n        AtualizarWidgetsRMI atualizarWidgetsRMI;\n        try {\n            atualizarWidgetsRMI = (AtualizarWidgetsRMI) Naming.lookup(url);\n            System.out.println(\"Referencia recuperada\");\n            return atualizarWidgetsRMI;\n        } catch (NotBoundException ex) {\n            Logger.getLogger(Reference.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (MalformedURLException ex) {\n            Logger.getLogger(Reference.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (RemoteException ex) {\n            Logger.getLogger(Reference.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return null;\n\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,null,null,null],"name":"br/ufrn/controlers/Reference.java"}]}